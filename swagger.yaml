swagger: "2.0"
info:
  description: "TODO application based on Flask+Lambda+Serverless"
  version: "1.0.0"
  title: "Swagger TODO"
  contact:
    email: "pahamihali4@gmail.com"
host: "127.0.0.1"
basePath: "/api"
tags:
- name: "todo"
  description: "Everything about your Todos"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /todo:
    post:
      tags:
      - "todo"
      summary: "Add a new todo to the store"
      description: ""
      operationId: "addTodo"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Todo object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Todo"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Todo"
        "405":
          description: "Invalid input"
    get:
      tags:
      - "todo"
      summary: "Get todo list"
      description: ""
      operationId: "getTodos"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Todos"
        "404":
          description: "Todos not found"
  /todo/{todoId}:
    get:
      tags:
      - "todo"
      summary: "Find todo by ID"
      description: "Returns a single todo"
      operationId: "getTodoById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "todoId"
        in: "path"
        description: "ID of todo to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Todo"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Todo not found"
    post:
      tags:
      - "todo"
      summary: "Updates a todo in the store with form data"
      description: ""
      operationId: "updatetodoWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "todoId"
        in: "path"
        description: "ID of todo that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "todoText"
        in: "formData"
        description: "Updated text of the todo"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the todo"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Todo"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Todo not found"
        "405":
          description: "Invalid input"
    delete:
      tags:
      - "todo"
      summary: "Deletes a todo"
      description: ""
      operationId: "deleteTodo"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "todoId"
        in: "path"
        description: "Todo id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Todo was deleted"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Todo not found"
definitions:
  Todo:
    type: "object"
    required:
    - "todoText"
    - "status"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: "1"
      todoText:
        type: "string"
        description: "What should you do"
        example: "This is the todo text"
      status:
        type: "string"
        description: "todo status in the store"
        enum:
        - "pending"
        - "done"
        example: "pending"
      datetimeExecution:
        type: "string"
        description: "The end point of time"
        example: "09-09-2020:3-00 pm"
    xml:
      name: "Todo"
  Todos:
    type: "object"
    properties:
      todos:
        type: "array"
        xml:
          name: "todo"
          wrapped: true
        items:
          $ref: "#/definitions/Todo"
    xml:
      name: "Todos"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"